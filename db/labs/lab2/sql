1)  SELECT name, author, price FROM books
2)  SELECT DISTINCT author FROM books
3)  SELECT id, price FROM books WHERE publish_table = 'Москва'
4)  SELECT * FROM customers WHERE LEFT(name, 1) = 'A'
5)  SELECT * FROM books WHERE name like '%баз% данных%'
6)  SELECT SUM(books.price) FROM orders 
      INNER JOIN books ON books.id = orders.book_id
      WHERE orders.date = '2018-01-31'
7)  SELECT COUNT(*) FROM suppliers as S 
      INNER JOIN (
          SELECT address, phone FROM suppliers GROUP BY address, phone HAVING COUNT(*) = 1
      ) T
      ON S.address = T.address AND S.phone = T.phone
8)  SELECT SUM(books.price) FROM orders 
      INNER JOIN books ON books.id = orders.book_id
      WHERE orders.date BETWEEN '2018-02-01' AND '2018-04-01'
9)  SELECT DATE_TRUNC('month', date)::date as month, AVG(books.price::NUMERIC)
      FROM orders 
      INNER JOIN books ON books.id = orders.book_id
      GROUP BY month
10) SELECT orders.id, orders.date, customers.name FROM orders
      INNER JOIN customers ON customers.id = orders.customer_id
      INNER JOIN books ON books.id = orders.book_id
      WHERE orders.pre_payed > books.price::NUMERIC
11) SELECT suppliers.id, COUNT(supplies.id) AS "Количество видов книг", COUNT(books.rest) AS "Суммарный остаток" FROM suppliers
      INNER JOIN supplies ON supplies.supplier_id = suppliers.id
      INNER JOIN books ON books.id = supplies.book_id
      GROUP BY suppliers.id
12) 1) SELECT orders.* FROM orders
	 INNER JOIN customers ON customers.id = orders.customer_id
	 WHERE EXTRACT(month FROM date) BETWEEN 1 AND 3
	 AND EXTRACT(year FROM date) = 2001
	 AND customers.address = 'Брест'
    2) WITH orders_in_2001 AS
	(
	 SELECT customers.id as customer_id, orders.paid
	   FROM orders
	   INNER JOIN customers ON customers.id = orders.customer_id
	   WHERE EXTRACT(month FROM date) BETWEEN 1 AND 3
 	   AND EXTRACT(year FROM date) = 2001
	   AND customers.address = 'Брест'
	)

	SELECT orders_in_2001.customer_id,
	  (SELECT COUNT(*) FROM orders_in_2001 WHERE paid = 'yes') AS "Количество оплаченных заказов",
	  (SELECT COUNT(*) FROM orders_in_2001 WHERE paid = 'no') AS "Количество неоплаченных заказов"
	  FROM orders_in_2001
	  GROUP BY orders_in_2001.customer_id
13) SELECT * FROM books
      WHERE price::NUMERIC * 1.12 > 10000
14) SELECT customers.id, SUM(books.price) FROM customers
      INNER JOIN orders ON orders.customer_id = customers.id
      INNER JOIN books ON books.id = orders.book_id
      GROUP BY customers.id
15) SELECT * FROM books
      WHERE books.id NOT IN (
  	SELECT books.id FROM books
	  INNER JOIN orders ON orders.book_id = books.id
	)

### INDIVIDUAL TASK

16) SELECT number, category, rent_per_day FROM rooms
17) SELECT DISTINCT category FROM rooms
18) SELECT id, rent_per_day FROM rooms WHERE category = 'Люкс'
19) SELECT * FROM administrators WHERE LEFT(first_name, 1) = 'Д'
20) SELECT SUM(bookings.price) FROM bookings
      WHERE date = '2023-03-13'
21) SELECT clients.id, clients.first_name, SUM(bookings.total_cost) FROM bookings
      JOIN clients ON bookings.client_id = clients.id
      GROUP BY clients.id
22) SELECT rooms.number, rooms.category
      FROM bookings
      JOIN rooms ON bookings.room_id = rooms.id
      WHERE bookings.date = '2024-04-17';
23) SELECT clients.first_name, clients.last_name, AVG(bookings.total_cost::NUMERIC) AS average_booking_cost
	FROM clients
	JOIN bookings ON clients.id = bookings.client_id
	GROUP BY clients.first_name, clients.last_name;
24) SELECT room_categories.category, SUM(bookings.total_cost) AS revenue, COUNT(bookings.id) AS bookings_count
FROM (
    SELECT rooms.id, rooms.category
    FROM rooms
    GROUP BY rooms.id, rooms.category
) AS room_categories
JOIN bookings ON room_categories.id = bookings.room_id
GROUP BY room_categories.category
ORDER BY SUM(bookings.total_cost) DESC
